<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2010-2012 by PHP-maven.org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>Maven for PHP - Documentation phase</title>
		<author email="mep_eisen@web.de">Martin Eisengardt</author>
	</properties>
	
	<head>
		<title>Maven for PHP - Documentation phase</title>
		<meta name="keyword" content="apache, maven, php, php-maven, maven tutorial, php maven tutorial, maven site, php site, maven documentation, php maven documentation, php documentation, project documentation, project generate" />		
	</head>
	
	<body>
	
		<p style="text-align:center">[ <a href="tut-lifecycle-building.html">Previous</a> | <a href="tutorials.html">TOC</a> | <a href="tut-lifecycle-deploy.html">Next</a> ]</p>
		
		<section name="Documentation phase">
			<subsection name="Preamble">
			<p>Within this tutorial we will explain how to create the project documentation and how to generate project reports.
			We will not discuss all of the documentation formats or reports maven supports by default. Additional formats are
			explained later on.</p>
			</subsection>
		
			<subsection name="Create documentation">
			<p>To create the documentation invoke the following command:</p>
		
			<source>mvn site</source>
		
			<p>You will find the results within the folder target/site. Of course this is not a good result because
			maven does not yet know what to do.</p>
			</subsection>
		
			<subsection name="site.xml">
			<p>First create a folder src/site and place a site.xml with following content:</p>
			
			<source><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="Maven">
	<version position="left" />

	<skin>
		<groupId>org.apache.maven.skins</groupId>
		<artifactId>maven-stylus-skin</artifactId>
		<version>1.0</version>
	</skin>
	<body>
		<links>
			<item name="PHP-Maven" href="http://www.php-maven.org/" />
		</links>

		<menu name="Main">
			<item name="Welcome" href="index.html" />
		</menu>
		
		<menu ref="reports" />
		
	</body>
</project>
			]]></source>

			<p>The site.xml declares the main layout and menus of your project documentation. It will be used to build every single site.
			As you see there are some special menu entries. At first there is a welcome page (the index.html itself) and there is a ref
			to tell maven where to place all the reports it generates. Before we start we need to create the index page.</p>
			</subsection>
		
			<subsection name="The index page">
			<p>We will create an index page by using xdoc (maven doxia format). Maven supports many formats that are specialized on
			many tasks. However doxia is the format that is similar to classic html. There are other formats we will present later on
			in the tutorial. For example apache apt is a simple text file that is similar to wiki notation. Create the file
			src/site/xdoc/index.xml</p>
			
			<source><![CDATA[
<?xml version="1.0" encoding="ISO-8859-1"?>
<document>
	<properties>
		<author email="mail@mydomain.org">My Name</author>

		<title>Welcome to my great project</title>
		<meta name="keyword" content="apache, maven, php" />
	</properties>
	
	<body>
		<section name="HELLO :)">
			<p>This is the <b>best</b> <i>project</i> you ever found in thw <code>world wide web</code>.</p>
			
			<subsection name="Some subsection">
				<p>Hello Developer</p>
			</subsection>
		</section>
	</body>
</document> 
			]]></source>

			<p>As you see we declare some paragraphs. Those are translated to the h-tags you know from html. You should always follow this convention
			and not include headings by classic html tags within the body. Why? This tells doxia (that&apos;s the name of the plugin responsible for xdoc)
			the structure of the document and may be used to create some menu on big pages.</p>
			</subsection>
		
			<subsection name="Bringing it together">
			<p>Now that we created our index site let us run the site goal again. Have a look in the target directory and browse the new index.html
			there. From this point you can start to create more sites and link them. Each xml file within the xdoc folder will be used by
			doxia to create a html file with same name (like index.xml became index.html). Images and other things can be placed into
			folder src/site/resources/img or src/site/resources/css or any other sub folder you like.</p>
		
			<p>View the phpDocumentor report and the test report already created. Now you may understand why we said &quot;Simply do not think of
			the contents of your pom.xml, simply use the example.&quot; The pom.xml contains hints for the site-plugin which reports to generate.
			Look at the pom.xml and you see the two reports we generated. There is a configuration for phpDocumentor as well as for surefire
			that is reposible for test reports. You can add more reports, for example a TODO tag list, checkstyle or pmd. Later on you will
			find useful help on more reports to be added.</p>
			</subsection>
		</section>
		
		<p style="text-align:center">[ <a href="tut-lifecycle-building.html">Previous</a> | <a href="tutorials.html">TOC</a> | <a href="tut-lifecycle-deploy.html">Next</a> ]</p>
		
</body>
</document>