<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2010-2012 by PHP-maven.org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <author email="christian.wiedemann@key-tec.de"> Christian Wiedemann
    </author>

    <title>Using Zend Framework in your Maven PHP Project</title>
  </properties>

  <meta content="apache, maven, php" name="keyword"></meta>

  <body>
		<p style="text-align:center">[ <a href="tut-archetypes.html">Previous</a> | <a href="tutorials.html">TOC</a> | <a href="tut-flow3.html">Next</a> ]</p>

    <section name="Create a new Zend Framework project with Maven integration">
      (DEPRECATED)
      (TODO)
      
      <subsection name="Folder structure"> <p>First, a new PHP Maven web project is generated using the <a href="php-web-5min.html">PHP web project - 5 minute starter guide.</a>
 In this web project, the typical
      Zend Framework project structure must be integrated:</p> <source>
      my-project 
      |-- pom.xml 
      `-- src 
      		`-- main 
	      		|-- php 
	      		|    `-- org 
	      		|         `-- sample
	     		|             |-- controllers 
	     		|             |-- forms 
	     		|             |-- layouts 
	     		|             |-- models 
	     		|              `-- views
	     		`-- webapp 
	     			|-- images 
	     			|-- styles 
	     			`-- index.php </source> As you can see, integration includes the two typical Zend Framework basic folders called &quot;application&quot; and
      &quot;public&quot;, which now are featured under the &quot;php/org/sample&quot; and &quot;webapp&quot; folders.
      </subsection>

      <subsection name="pom.xml"> In a next step, the pom.xml of the current project is adjusted, meaning that its dependency is added to the 
Zend Framework:
 <source> &lt;dependencies&gt; 
 			&lt;dependency&gt;
      			&lt;groupId&gt;com.zend&lt;/groupId&gt;
      			&lt;artifactId&gt;zend-framework&lt;/artifactId&gt;
      			&lt;version&gt;1.7.5&lt;/version&gt; 
      		&lt;/dependency&gt;
      	  &lt;/dependencies&gt; </source> </subsection>

      <subsection name="Install"> The following command in the command line
    then installs the project, downloads the Zend Framework and
      unzips it to the &quot;my-project/target/phpinc&quot; folder. <source> mvn install </source> </subsection>
    </section>

    <section name="Convert an existing Zend Framework project to Maven">
      <subsection name="Preparation"> First, please work through the &quot;Create a new Zend
      Framework project with Maven integration&quot; tutorial,
      in order to be able to generate the correct folder structure as well as a pom.xml file.<br></br> Next,
      all of the &quot;../application&quot; paths in the index.php
      need to be adjusted (in our example this refers to &quot;../php/org/sample&quot;).
      </subsection>

      <subsection name="php:validate and the Autoloader"> If the 
      application uses the Zend Autoloader, this might cause problems
      during the maven goal &quot;php:validate&quot;. <br></br> To avoid these problems,
      we recommend to initialize the Autoloader
      in a separate PHP script that is saved to
      &quot;src/main/php/org/sample/registerautoload.php&quot;: <source>
      &lt;?php 
      require_once &quot;Zend/Loader.php&quot;;
      Zend_Loader::registerAutoload(); 
      ?&gt; </source> This file is then added to the
      pom.xml as &quot;auto prepend&quot;: <source> 
     	&lt;plugin&gt;
	      &lt;groupId&gt;org.phpmaven&lt;/groupId&gt;
	      &lt;artifactId&gt;maven-php-plugin&lt;/artifactId&gt;
	      &lt;extensions&gt;true&lt;/extensions&gt;
	      &lt;version&gt;1.0-BETA-2&lt;/version&gt; 
	      &lt;configuration&gt;
	     	 &lt;compileArgs&gt; -d auto_prepend_file=registerautoload.php
	     	 &lt;/compileArgs&gt; &lt;ignoreValidate&gt;false&lt;/ignoreValidate&gt;
	      &lt;/configuration&gt; 
      &lt;/plugin&gt; </source> Having done that, the Zend
      Autoloader can be initialized during &quot;php:validate&quot; and, under normal circumstances,
      no class loading problems should occur.</subsection>
    </section>
    
		<p style="text-align:center">[ <a href="tut-archetypes.html">Previous</a> | <a href="tutorials.html">TOC</a> | <a href="tut-flow3.html">Next</a> ]</p>
    </body>

</document>