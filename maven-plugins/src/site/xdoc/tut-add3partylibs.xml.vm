<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<author email="christian.wiedemann@key-tec.de">
			Christian Wiedemann
		</author>

		<title>Maven for PHP - How to install 3rd party libraries.
		</title>
	</properties>
	<meta name="keyword" content="apache, maven, php"></meta>
	<body>
		<p style="text-align:center">[ <a href="tut-xworldsrepos-search.html">Previous</a> | <a href="tutorials.html">TOC</a> | <a href="tut-multiprojectlayout.html">Next</a> ]</p>
		
		<section name="3rd party extension">
		
			<subsection name="Preamble">
			<p>Within this tutorial you will learn how to install a third party extension. There are multiple ways to handle this. Although it is
			possible we do not recommend the fast way. This is because of two reasons: First of all this needs your own repository since the official
			repository won&apos;t allow you to do this and not everyone likes to add hundreds of repositories within their settings.xml. Without the
			official repository every single user of your library needs to manually install this 3rd party library and as everyone does this this may
			lead into common mistakes and anger. The second reason is that we recommend to let the project owner join the php-maven community and use
			php-maven to create a clean project.</p>
			
			<p>However we support more than one way to embed third party libraries. Doing it via the official repository is really better for all
			of us.</p>
			
			<p><strong>Notice that this example is using phpunit. You will find phpunit within the official repository so think of it as an example.
			You should not try it with phpunit but with another 3rd party library that is not part of the official repository. And you should not try
			it with pear projects. There is some pear support of php-maven itself so that downloading and installing manually is not recommended for
			pear at all.</strong></p>
			</subsection>
	
			<subsection name="Variant 1: The fast way.">
				<subsection name="Prepare the 3rd party library">
				<p>This tutorial will show how to use a third party library as a maven dependency. I use PHPUnit as an sample 3rd party library.
				First, download the source code and unzip it (for example
				<a href="http://pear.phpunit.de/get/PHPUnit-3.3.9.tar">http://pear.phpunit.de/get/PHPUnit-3.3.9.tar</a>).
				So now create a zip,tar,tgz where the first &quot;source folder&quot; is the root folder of the zip. At PHPUnit
				the root folder of the zip should be PHPUnit not PHPUnit-3.3.9.
				</p>
				</subsection>
				
				<subsection name="Install the library to your local repository.">
				<p>Than run the install:install goal. For PHPUnit the call looks like.</p>
				
				<source>install:install-file -Dfile=PHPUnit.zip -DgroupId=org.phpunit -DartifactId=phpunit5 -Dversion=3.3.9 -Dpackaging=jar -DgeneratePom=true</source>
				
				<p>Than you can add a dependency in your pom. PHP for Maven will simple unzip these dependency and add it to your include path.</p>
				
				<p>For more informations visit
				<a href="http://maven.apache.org/guides/mini/guide-3rd-party-jars-local.html">Guide to deploying 3rd party JARs to remote repository</a>
				at the maven website.</p>
				</subsection>
				
				<subsection name="Deploy the library to an remote repository.">
				<p>To deploy the third party library to an remote repository call mvn deploy:deploy-file.</p>
				
				<source>mvn deploy:deploy-file -DgroupId=org.phpunit -DartifactId=phpunit5 -Dversion=3.3.9 -Dpackaging=jar -Dfile=PHPUnit.zip -DrepositoryId=Id in your settings -Durl= scp: //</source>
				</subsection>
			</subsection>
			
			<subsection name="Variant 2: Provide a local repository">
			<p>There is another way to not need any additional repository. However this is meant to become the zip/phar part of your project.</p>
			
				<subsection name="Variant 2a: System dependency">
				<p>With the dependencies section you can add a path to resolve the dependency manually.</p>
				
				<source><![CDATA[
<dependency>
  <groupId>org.my3rdparty</groupId>
  <artifactId>my-artifact-id</artifactId>
  <version>0.9.2</version>
  <scope>system</scope>
  <systemPath>/absolute/path/to/lib/my3rdpartylib.phar</systemPath>
</dependency>
				]]></source>
				
				<p><strong>A REAL WARNING! Using this system scope is strongly discouraged since you may run into several problems.
				For example you will need to ensure that the 3rd party lib is available on every machine.</strong></p>
				</subsection>
				
				<subsection name="Variant 2b: A real repository trick">
				<p>There is a simple trick to embed 3rd party projects within your project as a real world example. Thus you need to embedd a real
				repository within your project. Remember that a repository is some kind of filesystem. So we can always embed repositories.
				See <a href="http://blog.dub.podval.org/2010/01/maven-in-project-repository.html">this article</a> for details.</p>
				
				<p>It leads us to the following section added to the pom.xml of your project:</p>
				
				<source><![CDATA[
<project>
  ...
  <repositories>
    <repository>
      <id>lib</id>
      <name>lib</name>
      <releases>
        <enabled>true</enabled>
        <checksumPolicy>ignore</checksumPolicy>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <url>file://${project.basedir}/lib</url>
    </repository>
  </repositories>
  ...
</project>
				]]></source>
				
				<p>Notice that the path of our example does is different from the article because we want to embed it into our package. Add the
				library (zip, phar or jar variant) to the lib folder right on the top level of your project as suggested in the article and create
				a small minimum pom for it.</p>
				
				<p>Now we must ensure that the lib folder is copied to the target/classes directory so that it is bundled within our package.</p>
				
				<source><![CDATA[
<project>
  ...
  <build>
    ...
    <resources>
      ...
      <resource>
        <directory>lib</directory>
        <targetPath>${project.build.outputDirectory}/lib</targetPath>
      </resource>
      ...
    </resources>
    ...
  </build>
  ...
</project>
				]]></source>
				
				<p>Now we got a working example for either the project sources and the package.</p>
				</subsection>
			</subsection>
			
			<subsection name="Variant 3: Deploy the lib to the official repository.">
			<p>Of course you can contact the author of the library and ask him to join the php-maven community. Or is the library available
			within the official maven repository as a jar file and you do not know it? So the best solution is to contact the author at first.</p>
			
			<p>The second way is to ask us for help. There are several ways to automatically embed third party libraries. This means we have
			several ways to automatically download them and install newer versions. This only works for libraries that do not require
			additional patches. Within the <a href="http://www.xworlds.org/">official repository site</a> you will find a button to
			contact us for third library support.</p>
			
			<p>The third possibility is to let the community itself manage the library. For thus there is a special hint on the module owner
			saying &quot;This is a community self-managed module&quot;. Those modules are managed by a team of community members. Newer versions are
			patched and deployed and other community members may help with newer versions. We created this model for special modules
			that require additional patches.</p>
			</subsection>
		</section>
		
		<p style="text-align:center">[ <a href="tut-xworldsrepos-search.html">Previous</a> | <a href="tutorials.html">TOC</a> | <a href="tut-multiprojectlayout.html">Next</a> ]</p>
		
	</body>

</document>