<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2010-2012 by PHP-maven.org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>Maven for PHP libraries - 10 minutes starter guide</title>
		
		<author email="christian.wiedemann@key-tec.de">Christian Wiedemann</author>
		<author email="martin.eisengardt@googlemail.com">Martin Eisengardt</author>
	</properties>
	<head>
		<title>Maven for PHP libraries - 10 minutes starter guide</title>
		<meta name="keyword" content="apache, maven, php, php-maven, php maven, php library, library, php maven library, development, tutorial, maven tutorial" />
	</head>
	<body>
		<section name="PHP libraries  - 10 minutes starter guide">
			<subsection name="Create a project">
			<p>
			First, prepare Maven and follow the <a href="${phpmavenRootUrl}/prepare.html">preparation instructions.</a>
			</p>
			
			<p>
			As maven is able to run we can now create a project. We use an archetype to create a project. Do not wonder why.
			Simply think of archetypes as some kind of project templates. There are various archetypes. You can see them
			at the <a href="archetypes/index.html">archetypes overview page</a>.
			</p>
			
			<p>Within maven every module is identified by the groupId, the artifactId and the version number. You often may see the
			following syntax &lt;groupId&gt;:&lt;artifactId&gt;:&lt;version&gt;. Fo4r your own project you should choose
			an artifact from a web domain you already own (to let your project be unique). Artifact ID should be some lowercased
			string with minus sign instead of dots/ spaces/ underlines.</p>
			
			<p>Change to a directory of your choice and type the following command:
<source>
mvn archetype:generate \
-DarchetypeGroupId=org.phpmaven \
-DarchetypeArtifactId=php5-lib-archetype \
-DarchetypeVersion=${phpmavenTagName} \
-DgroupId=org.sample \
-DartifactId=my-app \
-Dversion=0.0.1-SNAPSHOT
			</source>
			</p>
			
			<p>
			After some time maven will ask to confirm the parameters. The result will look like this:
			</p>
			<source>
my-app 
	|-- pom.xml 
	`-- src 
		|-- main 
		|	 `-- php 
		|		 `-- org 
		|			 `-- sample  
		|				`-- app.php 
		|`-- test 
		|	`-- php 
		|		`-- org 
		|			`-- sample 
		|				`-- apptest.php
		`-- site
			|-- site.xml
			`-- apt
				`-- index.apt
			</source>
			
			<p>
			As you see maven has created your directory layout. We will now explain something about this layout as this is some
			kind of standard.
			</p>
			
			<p>
			Everything of your php-sourcecode has to go to <source>src/main/php</source>. This folder should never contain any other files.
			If you would create a java project the source files would reside in <source>src/main/java</source>.
			</p>
			
			<p>
			Additional resources, for example css files or images should be located in <source>src/main/resources</source>. Simply create
			that folder if you need it.
			</p>
			
			<p>
			The test cases are located in <source>src/test/php</source> and any resource you need for testing goes to <source>src/test/resources</source>.
			</p>
			
			<p>
			The pom.xml in the project root folder is the central project file. It controls your project and tells maven important things about it.
			Open it and have a look at it.
			</p>
		</subsection>
		
		<subsection name="The POM">
		<p>
<macro name="snippet">
<param name="id" value="pom"></param>
<param name="file" value="${phpmavenFsRoot}/src/site/include/pom.xml"></param>
</macro></p>
        
        <p>
        Some things are self-explained. We do not explain the pom.xml in detail because this is topic of other tutorials and at least there are several
        books that explain it. As you see the module identification, the groupId, the artifactId and the version from our first command is entered.
        The most important thing is the packaging tag. It tells maven that this is a php project. There could be other packagings, for example
        the packaging jar is used for java projects.
        </p>
        
        <p>
        Another important information is the parent-tag. It tells maven that there is another module where it should receive additional information
        about the project. Think of a simple inheritance. There is always a parent we provide for you and you should use it since it contains some useful
        defaults for php projects.
        </p>
		</subsection>
		
		<subsection name="What have I just done?">
			<p>
			What have I just done?
			</p>
			
			<p>
			You have just executed the Maven goal archetype:generate and passed various parameters to that goal. The prefix archetype is
			the plugin containing the goal. This goal created a default project structure for your PHP project.
			</p>
			
			<p>
			Executing maven goals is important fou you. There are various goals you will learn about. For example the goal test is used to start
			the unit tests. The detailed format is: <source>mvn [options] &lt;groupId&gt;:&lt;artifactId&gt;:&lt;version&gt;:&lt;goal&gt;</source>.
			Most goals can be much shorter as maven knows what to do with them or where to find them. So for the archetype:generate goal the full
			name would be something like: <source>org.apache.maven.plugins:maven-archetype-plugin:2.2:generate</source>.
			</p>
		</subsection>
		
		<subsection name="Build the project">
			<p>Switch to your sample project directory</p> 
			<source>cd my-app</source>
			<p>and run:</p>  
			<source>mvn package</source>
			<p>The command line will print out various actions, ending with the following:</p>
			<source>
 ...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6 seconds
[INFO] Finished at: Thu Jul 20 19:15:06 CDT 2008
[INFO] Final Memory: 3M/6M
[INFO] ------------------------------------------------------------------------			
			</source>
			
			<p>
			But what happened know? Many things and too much to explain in 10 minutes. The most important thing is that you know have a target
			directory. The target directory is created as soon as you do something on your project that creates results. It is not meant to be
			placed in your version control. So write a proper svn_ignore/.gitignore to skip it. However. The php files and resources were copied
			into the target/classes folder. Thats the folder that represents your whole project after doing all the processing or the compile
			goal.
			</p>
			
			<p>
			Yes, we compiled the php. Do not wonder about it because actually PHP-Maven does only copy the php source files to the target
			folder. You could of course manipulate the files before getting to the target folder. For example you can directly embedd the
			version number from the pom.xml into a source file "version.php". This is called "filtering". You will learn this and other topics
			in the detailed tutorials.
			</p>
			
			<p>
			The target/classes folder is packed into the phar file you know see. You can know use or share this file. However sharing the file
			(in maven word "deploy") is covered by other tutorials.
			</p>
		</subsection>
		<subsection name="Project documentation">
		<p>
		Let us know execute the following command:</p>
		<source>mvn site</source>
		<p>Now look at the target/site folder. You will find a small website within it. Various sites are contained and
		at least an index.html (the source is located in src/site/xdoc/index.xml). There is api doc generated from phpdocumentor
		and there is a test report from our PHPUnit tests. Alothough you could start tests manually by invoking the "test" goal
		the tests are executed each time you generate the website.
		</p> 
		<p>
		Feel free to add other sites or manipulate the sites menu within src/site/site.xml. As you see your project just generated
		a small website. Ewspecially for library developers this is a nice standard in maven. In 10 minutes you get a good working
		project template.
		</p>
		</subsection>
		</section>
	</body>
	
</document>