<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2010-2012 by PHP-maven.org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>Maven for PHP - Eclipse integration</title>
		<author email="mep_eisen@web.de">
			Martin Eisengardt
		</author>
	</properties>
	
	<head>
		<title>Maven for PHP - Eclipse integration</title>
		<meta name="keyword" content="apache, maven, php, php-maven, maven tutorial, php maven tutorial, eclipse plugin, maven eclipse plugin, php maven eclipse, php code coverage, phpunit code coverage, eclipse phpunit" />		
	</head>
	
	<body>
	
		<p style="text-align:center">[ <a href="tut-setup-hudson.html">Previous</a> | <a href="tutorials.html">TOC</a> | <a href="tut-dependencymanagement.html">Next</a> ]</p>
		
		<section name="Eclipse integration">
		
			<subsection name="Preamble">
			<p>We assume that you have read the previous tutorials because we do not explain php-maven or maven itself at this point.
			However you should at least prepared your computer for use of php-maven (add repositories to settings.xml).
			You need at least Eclipse 3.7 (indigo) with m2e (Maven integration) and pdt (PHP Development).</p>
			</subsection>
		
			<subsection name="Installation">
			<ul>
			<li>Within eclipse go to the menu &quot;Help -&gt; Install New Software&quot;.</li>
			<li>Hit the &quot;Add&quot; button at the top left.</li>
			<li>Enter name &quot;PHPMaven update site&quot; and url &quot;http://www.php-maven.org/eclipse/update&quot;</li>
			<li>The update site is automatically selected and you are know able to enable the checkbox for phpmaven.</li>
			<li>Hit next/finish to install the eclipse plugins.</li>
			</ul>
			<p>Notice: If you get errors saying "bundle ch.qos.logback.classic is missing" you need to install m2e plugins first.
			Go to the <a href="http://www.eclipse.org/m2e/download/">M2E download site</a> and drag&amp;drop the small "install m2e" icon
			directly into your eclipse.
			</p>
			</subsection>
			
			<subsection name="Plugin execution not covered by lifecycle....">
			<p>This is a well known error in eclipse. One day the maven plugin developers decided to complain for every
			maven build plugin that eclipse does not know of. As soon as you see this error have a look if this is a plugin
			that you know of. If you do not know of this plugin simply ignore this error or use the quickfix feature to hide
			the error. However: If eclipse complains that it does not know how to handle phpmaven you have an installation problem
			or the eclipse plugin is too old. For details see the section "ignore plugin goal" or "execute plugin goal" at
			<a href="http://wiki.eclipse.org/M2E_plugin_execution_not_covered">the eclipse wiki</a>.</p>
			</subsection>
			
			<subsection name="Create a project">
			<p>There is a new wizard you can use to create a new php-maven project. This project will be configured as a
			standard project. Of course you may use your own archetype for project creation.</p>
			
			<ul>
			<li>Enter the new project wizard (right click on navigator and menu &quot;New -&gt; Project&quot;).</li>
			<li>Choose PHP-Maven project.</li>
			<li>Select the archetype you want to use.</li>
			<li>Enter the group id, artifact id and version for your new project.</li>
			<li>Hit finish.</li>
			</ul>
			<img src="images/tut/eclipse/new_project_1.jpg" alt="choose php-maven project"></img>
			<img src="images/tut/eclipse/new_project_2.jpg" alt="choose the archetype"></img>
			<img src="images/tut/eclipse/new_project_3.jpg" alt="enter the maven project info"></img>
			
			<p>The project is created and is well configured. Eclipse will respect the maven lifecycle as well as the
			dependencies. Notice that some pdt versions contain bugs that may lead into problems seeing the
			php classpath.</p>
			</subsection>
			
			<subsection name="Convert existing project">
			<p>If you already created projects and may want to convert them right-click on them. Within the menu there is
			a php-maven category. There you will find a menu entry called &quot;Convert to PHP-Maven project&quot;. You can enable php-maven support on
			m2e projects that are marked for packaging &quot;php&quot; or for pdt projects that do not yet have maven support.
			After enabling php-maven support for a pdt project you may need to rework the sources because php-maven does not
			do any rework or copy action for you. The sources must be located in src/min/php and src/test/php.</p>
			
			<p>We recommend to first create the directory structure needed for php-maven:</p>
			<img src="images/tut/eclipse/prepare_php_project.jpg" alt="prepare php project"></img><p><strong>Screenshot: Prepared PDT project with source folders already set.</strong></p>
			<p><br></br></p>
			<p><br></br></p>
			
			<p>After creating this structure you are ready to enable the PHP-Maven support:</p>
			<img src="images/tut/eclipse/convert_menu.jpg" alt="convert project"></img><p><strong>Screenshot: Enabled PHP-Maven support.</strong></p>
			<p><br></br></p>
			<p><br></br></p>
			
			<p>Converting the project enables the maven support and the m2e support within eclipse. However it already did some important
			things in background. You will know see a small &quot;m&quot; at the upper left corner of the project icon. This is indicating a maven
			project within eclipse. And you will know see the target directory:</p>
			<img src="images/tut/eclipse/converted_project.jpg" alt="converted project"></img><p><strong>Screenshot: Converted project.</strong></p>
			<p><br></br></p>
			<p><br></br></p>
			
			<p>However do not wonder about the error in pom.xml saying &quot;Plugin execution not covered&quot; for the maven-plugin-plugin. The m2e
			guys currently complain about every unknown plugin that is used by your eclipse project. That is not really an error and everything
			will work fine. PHP-Maven for eclipse already told eclipse what to do with php-maven build plugin itself. So it will know what to do for
			our project. However if you see errors related to really important plugins that may causing problems within eclipse.</p>
			</subsection>
			
			<subsection name="Using PHP-Maven for eclipse">
			<p>Let us first write down a small class that does some useful things:</p>
			<img src="images/tut/eclipse/sample_class.jpg" alt="sample class"></img><p><strong>Screenshot: A sample class.</strong></p>
			<p><br></br></p>
			<p><br></br></p>
			
			<p>As you see this class is automatically copied to the target classes folder. Now let us write a test class. But wait.
			Do we have a phpunit dependency? No, we don&apos;t. So let us add it. Open the pom.xml in pom editor, go to the
			dependencies tab and add a new dependency. Do not wonder about the next screenshot. In my local repository there are multiple
			variants of phpunit, patched and not patched. As you are using only the official repository you may only find the one and only
			phpunit from &quot;org.phpunit&quot; <i><strong>(Do not forget to select scope &quot;test&quot; instead of &quot;compile&quot;)</strong></i>:</p>
			<img src="images/tut/eclipse/add_phpunit_dependency.jpg" alt="add phpunit dependency"></img><p><strong>Screenshot: Add the phpunit dependency.</strong></p>
			<p><br></br></p>
			<p><br></br></p>
			
			<p>Now let us test it by writing a phpunit test case and by testing it with code coverage. As you see PHP-Maven automatically
			configured Eclipse so that the dependency is respected:</p>
			<img src="images/tut/eclipse/phpunit_code_completion.jpg" alt="phpunit code completion"></img><p><strong>Screenshot: Code completion and class information example.</strong></p>
			<p><br></br></p>
			<p><br></br></p>
			
			<p>The test class will test some meaningful things and verify that our class will work the expected way:</p>
			<img src="images/tut/eclipse/phpunit_testcase.jpg" alt="phpunit testcase"></img><p><strong>Screenshot: Example testcase for phpunit.</strong></p>
			</subsection>
			
			<subsection name="PHPUnit invocation">
			<p>Now right click on the project and have a look at the PHP-Maven menu. You will now find a small action to invoke the
			tests on your project (or when clicking on folders or files to test only the elected ones):</p>
			<img src="images/tut/eclipse/invoke_phpunit.jpg" alt="invoke phpunit"></img><p><strong>Screenshot: Invoke the phpunit testcases.</strong></p>
			<p><br></br></p>
			<p><br></br></p>
			
			<p>PHP-Maven will now open a new small view to display the test results once they are finished. You can know browse f.e. the
			coverage infos:</p>
			<img src="images/tut/eclipse/result_coverage.jpg" alt="result code coverage"></img><p><strong>Screenshot: Result view and code coverage display.</strong></p>
			<p><br></br></p>
			<p><br></br></p>
			
			<p>But there is smarter way than browsing the tree. Open the FooClass file once again. You will know see a line marker
			indicating the code coverage. Green markers means: Line covered by the tests from last run. Red marker means: Line not covered.
			And a yellow marker means: Line not completely covered:</p>
			<img src="images/tut/eclipse/result_coverage_editor.jpg" alt="result code coverage in eclipse editor"></img><p><strong>Screenshot: Code covered directly visible in the source editor.</strong></p>
			</subsection>
		
		</section>
		
		<p style="text-align:center">[ <a href="tut-setup-hudson.html">Previous</a> | <a href="tutorials.html">TOC</a> | <a href="tut-dependencymanagement.html">Next</a> ]</p>
		
</body>
</document>