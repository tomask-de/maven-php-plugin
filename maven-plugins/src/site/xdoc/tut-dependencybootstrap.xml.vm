<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2010-2012 by PHP-maven.org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>Maven for PHP - Dependency bootstrap</title>
		<author email="martin.eisengardt@googlemail.com">Martin Eisengardt</author>
	</properties>
	
	<head>
		<title>Maven for PHP - Dependency bootstrap</title>
		<meta name="keyword" content="apache, maven, php, php-maven, maven tutorial, php maven tutorial, php dependency, dependency management" />		
	</head>
	
	<body>
		<p style="text-align:center">[ <a href="tut-dependencymanagement.html">Previous</a> | <a href="tutorials.html">TOC</a> | <a href="tut-pear.html">Next</a> ]</p>
		
		<section name="Dependency bootstrap">
		<p>
		PHP-Maven is able to pass dependency information to a special php script. Within this script you are able to handle frameworks, package menager invocations
		and many other things. First of all have a look at the dependency configuration:
<macro name="snippet">
<param name="id" value="bootstrap"></param>
<param name="file" value="${phpmavenFsRoot}/src/site/include/pom_depmng.xml"></param>
</macro>  
		</p>
		
		<p>
		As you see the action "bootstrap" is passed to the dependency configuration. There is an additional option called "bootstrapFile". This option
		is required as soon as you use bootstrap actions. It will be invoked during dependency extraction process.
		</p>
		
		<p>
		Within the bootstrap file you may expect an array in variable $mavenDependencies. See the following example:
		</p>
		<pre>
$mavenDependencies = array(
    array(
        'groupId' => 'org.phpmaven.test',
        'artifactId' => 'proj1',
        'version' => '0.0.1',
        'pharFile' => 'C:\\Users\\myuser\\.m2\\repository\\org\\phpmaven\\test\\proj1\\0.0.1\\proj1-0.0.1.phar',
        'isNew' => true,
        'isChanged' => false
    ),
    array(
        'groupId' => 'org.phpmaven.test',
        'artifactId' => 'lib1',
        'version' => '0.0.1',
        'pharFile' => 'C:\\Users\\myuser\\.m2\\repository\\org\\phpmaven\\test\\lib1\\0.0.1\\lib1-0.0.1.phar',
        'isNew' => false,
        'isChanged' => true
    ),
    array(
        'groupId' => 'org.phpmaven.test',
        'artifactId' => 'lib2',
        'version' => '0.0.1',
        'pharFile' => 'C:\\Users\\myuser\\.m2\\repository\\org\\phpmaven\\test\\lib2\\0.0.1\\lib2-0.0.1.phar',
        'isNew' => false,
        'isChanged' => false
    ),
    'scope' => 'compile',
    'targetDir' => 'C:\\myproject\\target\\php-deps'
);
		</pre>
		
		<p>This example shows three dependencies. The first is entire new, the second was changed since the last invocation and the
		third was already seen by the bootstrap-script. The bootstrap may be invoked for scope 'compile' or 'test'.</p>
		</section>
		
		<p style="text-align:center">[ <a href="tut-dependencymanagement.html">Previous</a> | <a href="tutorials.html">TOC</a> | <a href="tut-pear.html">Next</a> ]</p>
	</body>
</document>