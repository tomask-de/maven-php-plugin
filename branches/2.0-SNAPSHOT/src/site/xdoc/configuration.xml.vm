<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2010-2012 by PHP-maven.org

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>Configuration overview</title>
		<author email="mep_eisen@web.de">Martin Eisengardt</author>
	</properties>
	
	<head>
		<title>Configuration overview</title>
		<meta name="keyword" content="apache, maven, php, configuration, maven-php-plugin, php-plugin, maven-php-exec, maven-php-project, naven-php-pear, maven-php-phpunit, maven-php-phpdoc, maven-php-phar, phar, phpdoc, phpdocumentor, phpunit" />		
	</head>
	
	<body>
	
	<section name="Advanced users">
	<p>
	Those being already familiar with maven should read the following list:
	</p>
	<ul>
	<li><a href="${phpmavenRootUrl}/prepare.html">Add the php-maven repositories</a></li>
	<li><a href="archetypes/index.html">Use the existing archetypes</a></li>
	<li>Use packaging "php" with build extension org.phpmaven:maven-php-plugin to create a php project</li>
	<li>See the configuration below for controlling the behaviour of maven for php</li>
	<li>See the <a href="maven-php-plugin/plugin-info.html">mojo report</a> for details on maven-php-plugin mojos</li>
	</ul>
	</section>

	<section name="Configuration overview">
	<p>
	  As the most maven plugins the configuration is placed within the build section of your pom.xml. Depending on the configuration option you want to change
	  add the following to your pom:
	</p>
	<macro name="snippet">
	  <param name="id" value="pom"></param>
	  <param name="file" value="${phpmavenFsRoot}/src/site/include/pom_config_example.xml"></param>
    </macro>
    <p>
      The versions are managed by the pom parent: org.phpmaven:php-parent-pom:${project.version}. All plugins in php-maven have the same version number. So if
      you use version ${project.version} of maven-php-plugin you should use the same version on all other maven-php plugins to have a compatible setup.
    </p>
	</section>

	<section name="Configuration - PHP.EXE">
	<p>
	  At first you should choose the best plugin to influence the php.exe. See the following hints:
	</p>
	<ul>
	<li><b>maven-php-plugin</b> will influence the php.exe configuration for some of the goals. Not all goals support setting the
	    php executable configuration.</li>
	<li><b>maven-php-xxxx</b> will influence the php.exe for all tasks this plugin is performing. For example maven-php-phpunit will influence
	    the executable configuration for phpunit invocations.</li>
	<li><b>maven-php-project</b> will influence the php.exe for each project invocation. Project invocations are each phpunit tests and each
	    invocation to a cli script.</li>
	<li><b>maven-php-exec</b> will influence the php.exe for <i>everything</i>. Be careful to use this because if you do some mistake php-maven will
	    not be working any more. Even the packing of phar files may fail.</li>
	</ul>
	<p>
	  As you see we have several locations for setting the php.exe. You should always be careful where to set command line options or additional defines.
	  If you only need them for phpunit then use the phpunit plugin for configuration.
	</p>
	<p>
	  PHP-Maven assumes that you find PHP.EXE on path variable. However this may be a problem on your system or you want to use an alternative php.exe.
	  In this case you should use the maven-php-exec configuration and change the phpExecutable.
	</p>
	</section>
	
	<section name="maven-php-exec">
	<p>
	  See <a href="maven-php-exec/apidocs/org/phpmaven/exec/IPhpExecutableConfiguration.html">javadoc</a> for details. This configuration is used for
	  every invocation of php (including phar and pear). see the following example:
	</p>
	<macro name="snippet">
	  <param name="id" value="pom-exec-default"></param>
	  <param name="file" value="${phpmavenFsRoot}/src/site/include/pom_config_example.xml"></param>
    </macro>
    <p>
      This example uses a different executable and overwrites the error_reporting for any php invocation.
    </p>
	</section>
	
	<section name="maven-php-project">
	<p>
	  See <a href="maven-php-project/apidocs/org/phpmaven/project/IProjectPhpExecution.html">javadoc</a> for details. This configuration is used for
	  every invocation of php for project related stuff; currently php cli invocations and phpunit invocations. See the following example to add
	  a custom include path:
	</p>
	<macro name="snippet">
	  <param name="id" value="pom-project-default"></param>
	  <param name="file" value="${phpmavenFsRoot}/src/site/include/pom_config_example.xml"></param>
    </macro>
	</section>
	
	<section name="maven-php-pear">
	<p>
	  See <a href="maven-php-pear/apidocs/org/phpmaven/pear/IPearConfiguration.html">javadoc</a> for details. This configuration is used for
	  every invocation of pear packages. Notice: You do not need to configure anything for pear if you are using pear project as dependencies.
	  Pear packages found in the official repository are simple php projects. See the following example to change the pear installation folder:
	</p>
	<macro name="snippet">
	  <param name="id" value="pom-pear-default"></param>
	  <param name="file" value="${phpmavenFsRoot}/src/site/include/pom_config_example.xml"></param>
    </macro>
	</section>
	
	<section name="maven-php-phpunit">
	<p>
	  See <a href="maven-php-phpunit/apidocs/org/phpmaven/phpunit/IPhpunitConfiguration.html">javadoc</a> for details. This configuration is used for
	  every phpunit invocation. See the following example to add a bootstrap file:
	</p>
	<macro name="snippet">
	  <param name="id" value="pom-phpunit-default"></param>
	  <param name="file" value="${phpmavenFsRoot}/src/site/include/pom_config_example.xml"></param>
    </macro>
	</section>
	
	<section name="maven-php-phpdoc">
	<p>
	  See <a href="maven-php-phpdoc/apidocs/org/phpmaven/phpdoc/IPhpdocConfiguration.html">javadoc</a> for details. This configuration is used for
	  every phpdoc report generation. See the following example for setting the phpdoc version that will be used (downloads phpdoc from maven).
	</p>
	<macro name="snippet">
	  <param name="id" value="pom-phpdoc-default"></param>
	  <param name="file" value="${phpmavenFsRoot}/src/site/include/pom_config_example.xml"></param>
    </macro>
    <p>
	  See the following example for using the phpdoc from command line (your local pear installation should be on the path variable).
	</p>
	<macro name="snippet">
	  <param name="id" value="pom-phpdoc-cli"></param>
	  <param name="file" value="${phpmavenFsRoot}/src/site/include/pom_config_example.xml"></param>
    </macro>
	</section>
	
	<section name="maven-php-phar">
	<p>
	  See <a href="maven-php-phar/apidocs/org/phpmaven/phar/IPharPackagerConfiguration.html">javadoc</a> for details. This configuration is used for
	  every phar invocation for both, packing phar archives and unpacking phar archives. See the following example for setting a
	  custom stub file:
	</p>
	<macro name="snippet">
	  <param name="id" value="pom-phar-default"></param>
	  <param name="file" value="${phpmavenFsRoot}/src/site/include/pom_config_example.xml"></param>
    </macro>
	</section>
	
</body>
</document>